buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' } // 阿里云 Maven 镜像
        maven { url 'https://maven.aliyun.com/repository/jcenter' } // 阿里云 JCenter 镜像
        maven { url 'https://maven.aliyun.com/repository/google' } // 阿里云 Google 镜像
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' } // 阿里云 Gradle Plugin 镜像
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.2.1")
        classpath("io.spring.gradle:dependency-management-plugin:1.1.4")
    }
}

allprojects {
    ext {
        set('springCloudVersion', '4.1.0')
        set('springCloudAliVersion', '2022.0.0.0')
        set('springBootVersion', '3.2.1')
    }
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.6-SNAPSHOT"
        }
    }
    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url 'https://maven.aliyun.com/repository/public' } // 阿里云 Maven 镜像
        maven { url 'https://maven.aliyun.com/repository/jcenter' } // 阿里云 JCenter 镜像
        maven { url 'https://maven.aliyun.com/repository/google' } // 阿里云 Google 镜像
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' } // 阿里云 Gradle Plugin 镜像
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    }
    java {
        sourceCompatibility = '17'
    }

    configurations {
        all*.resolutionStrategy {
            dependencySubstitution {
                all { DependencySubstitution substitution ->
                    substitution.useTarget(substitution.requested)
                }
            }
        }
    }
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
    idea {
        module {
//        downloadJavadoc = true // 如果你也需要 Javadoc
            downloadSources = true
        }
    }
    dependencies {
        implementation('cn.hutool:hutool-all:5.8.25')
        implementation('org.projectlombok:lombok:1.18.24')
        annotationProcessor('org.projectlombok:lombok:1.18.24')
        implementation("org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudVersion}")
        implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer:${springCloudVersion}")
        implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0")

        //bootstrap引导配置生效
        implementation("org.springframework.cloud:spring-cloud-starter-bootstrap:${springCloudVersion}")
        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:${springCloudAliVersion}")
        implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:${springCloudAliVersion}")

        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        testImplementation("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")

    }
    tasks.named('test') {
        useJUnitPlatform()
    }
    group = 'com.wanzi'
    version = '0.0.1'

    jar.enabled = false
//    bootJar.enabled = true
    bootJar {
        mainClass = 'com.wanzi.SpringComeUpApplication'
    }
}

subprojects {

}






